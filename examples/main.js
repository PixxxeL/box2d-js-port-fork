// Generated by CoffeeScript 1.7.1
var Fps, addBody, animate, bodies, fps, ground, initBox2d, initDraw, mouseDown, mouseMove, mouseUp, world;

world = null;

fps = null;

Fps = (function() {
  function Fps(fpsEl) {
    this.fpsEl = fpsEl;
    this.lastFps = +(new Date);
    this.frameTime = 0;
    this.frame = 0;
  }

  Fps.prototype.render = function() {
    var elapsed, now;
    now = +(new Date);
    elapsed = now - this.lastFps;
    this.frameTime += (elapsed - this.frameTime) / 20;
    if (!(this.frame % 60)) {
      this.fpsEl.innerHTML = (1000 / this.frameTime) | 0;
    }
    this.lastFps = now;
    return this.frame++;
  };

  return Fps;

})();

initBox2d = function() {
  var aabb;
  aabb = new b2AABB;
  aabb.minVertex.Set(0, 0);
  aabb.maxVertex.Set(640, 480);
  return window.world = new b2World(aabb, new b2Vec2(0, 300), true);
};

initDraw = function() {
  var canvas, ctx;
  canvas = document.getElementById('canvas');
  canvas.addEventListener('mousedown', mouseDown);
  canvas.addEventListener('mouseup', mouseUp);
  canvas.addEventListener('mousemove', mouseMove);
  ctx = canvas.getContext('2d');
  window.world.SetDebugDraw({
    ctx: ctx,
    width: 640,
    height: 480
  });
  return fps = new Fps(document.getElementById('fps-value'));
};

mouseDown = function(e) {
  var joint, mouseX, mouseY, worldPoint;
  world = window.world;
  joint = world.m_jointList;
  while (joint) {
    if (joint.m_userData === 'mouseJoint') {
      return;
    }
    joint = joint.m_next;
  }
  mouseX = e.clientX - (this.offsetLeft - this.scrollLeft);
  mouseY = e.clientY - (this.offsetTop - this.scrollTop);
  worldPoint = new b2Vec2(mouseX, mouseY);
  return world.QueryPoint(function(body) {
    var jointDef, mass, mouseJoint;
    mass = body.GetMass();
    if (!mass) {
      return;
    }
    jointDef = new b2MouseJointDef;
    jointDef.body1 = world.GetGroundBody();
    jointDef.body2 = body;
    jointDef.target = worldPoint;
    jointDef.maxForce = 10000 * mass;
    jointDef.collideConnected = true;
    mouseJoint = world.CreateJoint(jointDef);
    return mouseJoint.m_userData = 'mouseJoint';
  }, worldPoint);
};

mouseUp = function(e) {
  var joint;
  world = window.world;
  joint = world.m_jointList;
  while (joint) {
    if (joint.m_userData === 'mouseJoint') {
      world.DestroyJoint(joint);
      joint = null;
      return;
    }
    joint = joint.m_next;
  }
};

mouseMove = function(e) {
  var joint, mouseX, mouseY, worldPoint;
  mouseX = e.clientX - (this.offsetLeft - this.scrollLeft);
  mouseY = e.clientY - (this.offsetTop - this.scrollTop);
  worldPoint = new b2Vec2(mouseX, mouseY);
  world = window.world;
  joint = world.m_jointList;
  while (joint) {
    if (joint.m_userData === 'mouseJoint') {
      joint.SetTarget(worldPoint);
      return;
    }
    joint = joint.m_next;
  }
};

addBody = function(params) {
  var body, bodyDef, height, i, p, points, radius, rotation, shapeDef, width, x, y, _i, _len;
  params || (params = {});
  x = params.x || 0;
  y = params.y || 0;
  width = params.width;
  height = params.height;
  radius = params.radius;
  points = params.points;
  rotation = params.rotation;
  bodyDef = new b2BodyDef;
  if (radius) {
    shapeDef = new b2CircleDef;
    shapeDef.radius = radius || 15;
    bodyDef.AddShape(shapeDef);
  } else if (points) {
    shapeDef = new b2PolyDef;
    shapeDef.vertexCount = points.length;
    for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
      p = points[i];
      shapeDef.vertices[i].Set(p[0], p[1]);
    }
    bodyDef.AddShape(shapeDef);
  } else {
    shapeDef = new b2BoxDef;
    shapeDef.extents.Set((parseInt(width, 10) || 30) * .5, (parseInt(height, 10) || 30) * .5);
    bodyDef.AddShape(shapeDef);
  }
  if (rotation) {
    shapeDef.localRotation = rotation;
  }
  shapeDef.density = params.density || 0;
  shapeDef.friction = params.friction || 0;
  shapeDef.restitution = params.restitution || 0;
  bodyDef.position.Set(x, y);
  body = world.CreateBody(bodyDef);
  body.m_userData = {
    name: params.name,
    additional: params.additional || {}
  };
  return body;
};

ground = function() {
  addBody({
    name: 'floor',
    x: 320,
    y: 475,
    width: 640,
    height: 10,
    friction: .1,
    density: 0
  });
  addBody({
    name: 'ceiling',
    x: 320,
    y: 5,
    width: 640,
    height: 10,
    friction: .1,
    density: 0
  });
  addBody({
    name: 'left wall',
    x: 5,
    y: 240,
    width: 10,
    height: 480,
    friction: .1,
    density: 0
  });
  return addBody({
    name: 'right wall',
    x: 635,
    y: 240,
    width: 10,
    height: 480,
    friction: .1,
    density: 0
  });
};

bodies = function() {
  var jointDef, tri;
  addBody({
    name: 'square',
    x: 260,
    y: 50,
    width: 30,
    height: 30,
    friction: .2,
    density: 1
  });
  addBody({
    name: 'circle',
    x: 370,
    y: 100,
    radius: 15,
    friction: .2,
    restitution: .2,
    density: 2
  });
  tri = addBody({
    name: 'static triangle',
    x: 320,
    y: 300,
    points: [[0, 0], [100, 100], [-100, 125]],
    friction: .1,
    density: .25
  });
  jointDef = new b2RevoluteJointDef;
  jointDef.body1 = tri;
  jointDef.body2 = window.world.GetGroundBody();
  jointDef.anchorPoint = tri.m_position;
  return window.world.CreateJoint(jointDef);
};

animate = function() {
  fps.render();
  window.world.Step(1 / 60, 4);
  window.world.DebugDraw();
  return requestAnimationFrame(animate);
};

window.onload = function() {
  initBox2d();
  initDraw();
  ground();
  bodies();
  return animate();
};
